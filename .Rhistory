partial(pred.var = "MonthlyIncome") %>%
plotPartial(rug = TRUE, train = train, main = "Monthly Income Partial Dependence Plot")
library(pdp)
rf %>%
partial(pred.var = "Age") %>%
plotPartial(rug = TRUE, train = train, main = "Age Partial Dependence Plot")
library(pdp)
rf %>%
partial(pred.var = "OverTime") %>%
plotPartial(rug = TRUE, train = train)
linearmod = glm(Attrition~., data = train, family = "binomial")
pred = predict(linearmod, test, type = "response")
confusionMatrix(pred, test$Attrition)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
confusionMatrix(pred2, test$Attrition)
data.frame(pred) %>% select(No) %>% ggplot(aes(No))+
geom_histogram(bins=50)
library(MASS)
coef = add_rownames(data.frame(linearmod$coefficients), "coefficent")
coef %>% ggplot(aes(coefficent,linearmod.coefficients))+
geom_bar(stat="identity")+ labs(y="Effect") +
theme(axis.text.x = element_text(size = 8, angle = 90))
library(pdp)
rf %>%
partial(pred.var = "DailyRate") %>%
plotPartial(rug = TRUE, train = train, main = "Monthly Income Partial Dependence Plot")
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "qda",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
confusionMatrix(pred2, test$Attrition)
data.frame(pred) %>% select(No) %>% ggplot(aes(No))+
geom_histogram(bins=50)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
library(tidyverse)
library(caret)
library(DataExplorer)
setwd("~/HRattrition")
df = read.csv("WA_Fn-UseC_-HR-Employee-Attrition 2.csv")
df$Over18 = NULL
df$EmployeeCount = NULL
df$StandardHours = NULL
#taking a quick look at the data
df %>% head()
df %>% plot_histogram()
df %>% plot_missing()
library(tidyverse)
library(caret)
library(DataExplorer)
setwd("~/HRattrition")
df = read.csv("WA_Fn-UseC_-HR-Employee-Attrition 2.csv")
df$Over18 = NULL
df$EmployeeCount = NULL
df$StandardHours = NULL
#taking a quick look at the data
df %>% head()
df %>% plot_histogram()
df %>% plot_missing()
df %>% select_if(is.numeric) %>%  plot_correlation(type = "c")
df %>% ggplot(aes(Attrition)) +
geom_bar()+
ggtitle("Employee Turnover")
# I import the caret library which I will use throughout this analysis
library(caret)
# I define a 70 - 30 train test split in the data.
split = createDataPartition(df$Attrition, p = 0.7, list = F)
train = df[split,]
test = df[-split,]
# I import the caret library which I will use throughout this analysis
library(caret)
# I define a 70 - 30 train test split in the data.
df$Attrition = levels(df$Attrition, "Yes", "No")
# I import the caret library which I will use throughout this analysis
library(caret)
# I define a 70 - 30 train test split in the data.
levels(df$Attrition) = c("Yes", "No")
split = createDataPartition(df$Attrition, p = 0.7, list = F)
train = df[split,]
test = df[-split,]
library(randomForest)
# I fit a random forest using the default parameters
rf =randomForest::randomForest(Attrition~., data = train)
pred = predict(rf, test, type = "response")
#pred[pred > 0.5] = "Yes"
#pred[pred < 0.5] = "No"
mean(pred == test$Attrition)
confusionMatrix(pred, test$Attrition)
rf
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Staying Based on Random Forest")
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(Yes) %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Staying Based on Random Forest")
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(Yes) %>%
ggplot(aes(Yes)) + geom_histogram(bins=50) + ggtitle("Probability of Staying Based on Random Forest")
varImpPlot(rf, n.var = 17)
df$Attrition = as.factor(df$Attrition)
library(pdp)
rf %>%
partial(pred.var = "DailyRate") %>%
plotPartial(rug = TRUE, train = train, main = "Monthly Income Partial Dependence Plot")
library(pdp)
rf %>%
partial(pred.var = "Age") %>%
plotPartial(rug = TRUE, train = train, main = "Age Partial Dependence Plot")
library(pdp)
rf %>%
partial(pred.var = "OverTime") %>%
plotPartial(rug = TRUE, train = train)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
confusionMatrix(pred2, test$Attrition)
data.frame(pred) %>% select(No) %>% ggplot(aes(No))+
geom_histogram(bins=50)
data.frame(pred) %>% select(Yes) %>% ggplot(aes(Yes))+
geom_histogram(bins=50)
library(MASS)
coef = add_rownames(data.frame(linearmod$coefficients), "coefficent")
coef %>% ggplot(aes(coefficent,linearmod.coefficients))+
geom_bar(stat="identity")+ labs(y="Effect") +
theme(axis.text.x = element_text(size = 8, angle = 90))
View(df)
df %>% ggplot(aes(Attrition)) +
geom_bar()+
ggtitle("Employee Turnover")
# I import the caret library which I will use throughout this analysis
library(caret)
# I define a 70 - 30 train test split in the data.
levels(df$Attrition) = c("Yes", "No")
split = createDataPartition(df$Attrition, p = 0.7, list = F)
train = df[split,]
test = df[-split,]
library(tidyverse)
library(caret)
library(DataExplorer)
setwd("~/HRattrition")
df = read.csv("WA_Fn-UseC_-HR-Employee-Attrition 2.csv")
df$Over18 = NULL
df$EmployeeCount = NULL
df$StandardHours = NULL
#taking a quick look at the data
df %>% head()
df %>% plot_histogram()
df %>% plot_missing()
df %>% select_if(is.numeric) %>%  plot_correlation(type = "c")
df %>% ggplot(aes(Attrition)) +
geom_bar()+
ggtitle("Employee Turnover")
# I import the caret library which I will use throughout this analysis
library(caret)
# I define a 70 - 30 train test split in the data.
split = createDataPartition(df$Attrition, p = 0.7, list = F)
train = df[split,]
test = df[-split,]
library(randomForest)
# I fit a random forest using the default parameters
rf =randomForest::randomForest(Attrition~., data = train)
pred = predict(rf, test, type = "response")
#pred[pred > 0.5] = "Yes"
#pred[pred < 0.5] = "No"
mean(pred == test$Attrition)
confusionMatrix(pred, test$Attrition)
rf
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(Yes) %>%
ggplot(aes(Yes)) + geom_histogram(bins=50) + ggtitle("Probability of Turnover Based on Random Forest")
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Turnover Based on Random Forest")
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Turnover Based on Random Forest")
pred2
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Turnover Based on Random Forest")
data.frame(pred2) %>% select(No)
library(tidyverse)
library(caret)
library(DataExplorer)
setwd("~/HRattrition")
df = read.csv("WA_Fn-UseC_-HR-Employee-Attrition 2.csv")
df$Over18 = NULL
df$EmployeeCount = NULL
df$StandardHours = NULL
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No)
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select_(No) %>%
#ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Turnover Based on Random Forest")
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select_(No) %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Turnover Based on Random Forest")
data.frame(pred2)
detach("package:MASS", unload=TRUE)
data.frame(pred2) %>% select_(No)
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select_(No)
pred2[,"No"]
pred2 = predict(rf, test, type = "prob")
pred2[,"No"] %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Turnover Based on Random Forest")
pred2 = predict(rf, test, type = "prob")
data.frame(pred2[,"No"]) %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Turnover Based on Random Forest")
data.frame(pred) %>% select(Yes) %>% ggplot(aes(Yes))+
geom_histogram(bins=50)
varImpPlot(rf, n.var = 17)
df$Attrition = as.factor(df$Attrition)
library(pdp)
rf %>%
partial(pred.var = "DailyRate") %>%
plotPartial(rug = TRUE, train = train, main = "Monthly Income Partial Dependence Plot")
library(pdp)
rf %>%
partial(pred.var = "Age") %>%
plotPartial(rug = TRUE, train = train, main = "Age Partial Dependence Plot")
library(pdp)
rf %>%
partial(pred.var = "OverTime") %>%
plotPartial(rug = TRUE, train = train)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
confusionMatrix(pred2, test$Attrition)
library(GGally)
library(GGally)
ggcoef(regFit$finalModel)
summary(regFit$finalModel)
coef = add_rownames(data.frame(linearmod$coefficients), "coefficent")
coef %>% ggplot(aes(coefficent,linearmod.coefficients))+
geom_bar(stat="identity")+ labs(y="Effect") +
theme(axis.text.x = element_text(size = 8, angle = 90))
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glmnet",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
confusionMatrix(pred2, test$Attrition)
plot(varImp(regFit))
plot(varImp(regFit),top = 15)
plot1= varImpPlot(rf, n.var = 17)
plot1
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
confusionMatrix(pred2, test$Attrition)
plot(varImp(regFit),top = 15)
plot(varImp(regFit),top = 15, main = "GLM variable importance")
plot(varImp(regFit),top = 15, main = "GLM variable importance", ylab = "Predictor")
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "knn",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
knnFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "knn",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
plot(varImp(Fit))
Fit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "knn",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
plot(varImp(Fit))
plot(varImp(Fit), 15)
Fit
confusionMatrix(Fit)
plot(varImp(Fit), 15)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
log(Attrition) ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
confusionMatrix(pred2, test$Attrition)
plot(varImp(regFit),top = 15, main = "GLM variable importance", ylab = "Predictor")
Fit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "SVMradial",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
Fit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "svmradial",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
Fit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "pls",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
confusionMatrix(Fit)
plot(varImp(Fit), 15)
Fit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "rf",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
confusionMatrix(Fit)
plot(varImp(Fit), 15)
df %>% ggplot(aes(MonthlyIncome, fill = OverTime))+
geom_histogram()
df %>% ggplot(aes(MonthlyIncome, fill = OverTime))+
geom_density()
df %>% ggplot(aes(EnvironmentSatisfaction, fill = OverTime))+
geom_density()
df %>% ggplot(aes(EnvironmentSatisfaction, fill = OverTime))+
geom_histogram()
df %>% ggplot(aes(EnvironmentSatisfaction, fill = OverTime))+
geom_histogram(bins = 4)
df %>% ggplot(aes(EnvironmentSatisfaction, fill = OverTime))+
geom_histogram(bins = 30)
set.seed(2017)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
confusionMatrix(pred2, test$Attrition)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
prop.table(confusionMatrix(pred2, test$Attrition))
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
prop.table(confusionMatrix(pred2, test$Attrition)$table)
set.seed(2017)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
prop.table(confusionMatrix(pred2, test$Attrition)$table)
df %>% plot_histogram()
df %>% ggplot(aes(MonthlyIncome, DailyRate))+
geom_point()
df %>% ggplot(aes(MonthlyIncome, DailyRate, color = Attrition))+
geom_point()
df %>% ggplot(aes(MonthlyIncome, Age, color = Attrition))+
geom_point()
df %>% ggplot(aes(MonthlyIncome, Age, color = Attrition))+
geom_point()+
geom_smooth("lm")
df %>% ggplot(aes(MonthlyIncome, Age, color = Attrition))+
geom_point()+
geom_smooth()
df %>% ggplot(aes(MonthlyIncome, Age, color = Attrition))+
geom_point()+
geom_smooth(method = "lm")
df %>% ggplot(aes(MonthlyIncome, DailyRate, color = Attrition))+
geom_point()+
geom_smooth(method = "lm")
