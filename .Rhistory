ggtitle("Employee Turnover")
library(caret)
split = createDataPartition(df$Attrition, p = 0.7, list = F)
train = df[split,] %>% drop_na()
test = df[-split,] %>% drop_na()
library(randomForest)
rf =randomForest::randomForest(Attrition~., data = train)
pred = predict(rf, test, type = "response")
#pred[pred > 0.5] = "Yes"
#pred[pred < 0.5] = "No"
mean(pred == test$Attrition)
confusionMatrix(pred, test$Attrition)
library(caret)
split = createDataPartition(df$Attrition, p = 0.6, list = F)
train = df[split,] %>% drop_na()
test = df[-split,] %>% drop_na()
library(randomForest)
rf =randomForest::randomForest(Attrition~., data = train)
pred = predict(rf, test, type = "response")
#pred[pred > 0.5] = "Yes"
#pred[pred < 0.5] = "No"
mean(pred == test$Attrition)
confusionMatrix(pred, test$Attrition)
rf
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of NoTurnover Based on Random Forest")
varImpPlot(rf, n.var = 17)
library(pdp)
rf %>%
partial(pred.var = "MonthlyIncome") %>%
plotPartial(rug = TRUE, train = train, main = "Monthly Income Partial Dependence Plot")
library(pdp)
rf %>%
partial(pred.var = "Age") %>%
plotPartial(rug = TRUE, train = train, main = "Age Partial Dependence Plot")
df %>% plot_missing()
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Staying Based on Random Forest")
linearmod = glm(Attrition~., data = train, family = "binomial")
pred = predict(linearmod, test, type = "response")
pred[pred > 0.5] = "Yes"
pred[pred < 0.5] = "No"
pred = as.factor(pred)
mean(pred == test$Attrition)
linearmod = glm(Attrition~., data = train, family = "binomial")
pred = predict(linearmod, test, type = "response")
pred[pred > 0.5] = "Yes"
pred[pred < 0.5] = "No"
pred = as.factor(pred)
#mean(pred == test$Attrition)
confusionMatrix(pred, test$Attrition)
pred = predict(linearmod, test, type = "response")
#mean(pred == test$Attrition)
confusionMatrix(pred, test$Attrition)
#mean(pred == test$Attrition)
confusionMatrix(pred, test$Attrition)
linearmod = glm(Attrition~., data = train, family = "binomial")
pred = predict(linearmod, test, type = "response")
#mean(pred == test$Attrition)
confusionMatrix(pred, test$Attrition)
confusionMatrix(pred, test$Attrition)
#mean(pred == test$Attrition)
pred
pred = predict(linearmod, test, type = "response")
pred[pred > 0.5] = "Yes"
pred[pred < 0.5] = "No"
#mean(pred == test$Attrition)
pred
pred = predict(linearmod, test, type = "prob")
pred = predict(linearmod, test, type = "response")
#mean(pred == test$Attrition)
pred
#mean(pred == test$Attrition)
pred > 1
#mean(pred == test$Attrition)
pred
pred[pred > 0.5] = "Yes"
pred[pred < 0.5] = "No"
pred = as.factor(pred)
#mean(pred == test$Attrition)
pred
linearmod = glm(Attrition~., data = train, family = "binomial")
pred = predict(linearmod, test, type = "response")
pred[pred > 0.5] = "No"
pred[pred < 0.5] = "Yes"
#mean(pred == test$Attrition)
pred
df %>% ggplot(aes(Attrition)) +
geom_bar()+
ggtitle("Employee Turnover")
linearmod = glm(Attrition~., data = train, family = "binomial")
pred = predict(linearmod, test, type = "response")
pred[pred > 0.5] = "Yes"
pred[pred < 0.5] = "No"
pred = as.factor(pred)
#mean(pred == test$Attrition)
pred
pred = predict(linearmod, test, type = "response")
pred[pred > 0.5] = "Yes"
pred[pred < 0.5] = "No"
pred = as.factor(pred)
#mean(pred == test$Attrition)
pred
pred = predict(linearmod, test, type = "response")
confusionMatrix(pred, test$Attrition)
pred = predict(linearmod, test, type = "response")
confusionMatrix(pred, test$Attrition)
linearmod = glm(Attrition~., data = train, family = "binomial")
ctrl <- trainControl(method = "repeatedcv", repeats = 10)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glmnet",
family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
library(tidyverse)
library(caret)
library(DataExplorer)
setwd("~/HRattrition")
df = read.csv("WA_Fn-UseC_-HR-Employee-Attrition 2.csv")
df$Over18 = NULL
df$EmployeeCount = NULL
df$StandardHours = NULL
#taking a quick look at the data
df %>% head()
df %>% select_if(is.numeric) %>%  plot_correlation(type = "c")
library(caret)
split = createDataPartition(df$Attrition, p = 0.6, list = F)
train = df[split,] %>% drop_na()
test = df[-split,] %>% drop_na()
library(randomForest)
rf =randomForest::randomForest(Attrition~., data = train)
pred = predict(rf, test, type = "response")
#pred[pred > 0.5] = "Yes"
#pred[pred < 0.5] = "No"
mean(pred == test$Attrition)
confusionMatrix(pred, test$Attrition)
rf
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Staying Based on Random Forest")
varImpPlot(rf, n.var = 17)
df$Attrition = as.factor(df$Attrition)
library(pdp)
rf %>%
partial(pred.var = "MonthlyIncome") %>%
plotPartial(rug = TRUE, train = train, main = "Monthly Income Partial Dependence Plot")
library(pdp)
rf %>%
partial(pred.var = "Age") %>%
plotPartial(rug = TRUE, train = train, main = "Age Partial Dependence Plot")
library(pdp)
rf %>%
partial(pred.var = "OverTime") %>%
plotPartial(rug = TRUE, train = train)
linearmod = glm(Attrition~., data = train, family = "binomial")
pred = predict(linearmod, test, type = "response")
confusionMatrix(pred, test$Attrition)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
regFit
summary(regFit)
confusionMatrix(regFit)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "knn",
family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "knn",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
confusionMatrix(regFit)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glmnet",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
confusionMatrix(regFit)
confusionMatrix(regFit)
regfit
regfit
confusionMatrix(regFit)
regFit
pred = predict(regFit, test$Attrition)
pred = predict(regFit, test$Attrition)
library(tidyverse)
library(caret)
library(DataExplorer)
setwd("~/HRattrition")
df = read.csv("WA_Fn-UseC_-HR-Employee-Attrition 2.csv")
df$Over18 = NULL
df$EmployeeCount = NULL
df$StandardHours = NULL
#taking a quick look at the data
df %>% head()
df %>% plot_histogram()
df %>% plot_missing()
df %>% select_if(is.numeric) %>%  plot_correlation(type = "c")
library(caret)
split = createDataPartition(df$Attrition, p = 0.6, list = F)
train = df[split,] %>% drop_na()
test = df[-split,] %>% drop_na()
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glmnet",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
confusionMatrix(regFit)
regFit
pred = predict(regFit, test$Attrition)
pred = predict(regFit, test)
confusionMatrix(pred, test$Attrition)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
confusionMatrix(regFit)
regFit
pred = predict(regFit, test)
confusionMatrix(pred, test$Attrition)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test)
confusionMatrix(pred, test$Attrition)
library(randomForest)
rf =randomForest::randomForest(Attrition~., data = train)
pred = predict(rf, test, type = "response")
#pred[pred > 0.5] = "Yes"
#pred[pred < 0.5] = "No"
mean(pred == test$Attrition)
confusionMatrix(pred, test$Attrition)
library(randomForest)
rf =randomForest::randomForest(Attrition~., data = train)
pred = predict(rf, test, type = "response")
#pred[pred > 0.5] = "Yes"
#pred[pred < 0.5] = "No"
mean(pred == test$Attrition)
confusionMatrix(pred, test$Attrition)
pred = predict(regFit, test)
confusionMatrix(pred, test$Attrition)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "pls",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test)
confusionMatrix(pred, test$Attrition)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "ranger",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test)
confusionMatrix(pred, test$Attrition)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "rda",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test)
confusionMatrix(pred, test$Attrition)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test)
confusionMatrix(pred, test$Attrition)
27=46
27=46
27+46
27/73
46/73
46/466
466/466+48
466/(466+48)
46/(46+48)
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_density() + ggtitle("Probability of Staying Based on Random Forest")
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_density(fill = "blue ") + ggtitle("Probability of Staying Based on Random Forest")
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_histogram() + ggtitle("Probability of Staying Based on Random Forest")
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_histogram(50) + ggtitle("Probability of Staying Based on Random Forest")
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_histogram() + ggtitle("Probability of Staying Based on Random Forest")
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Staying Based on Random Forest")
pred
pred = predict(regFit, test, type = "response")
pred = predict(regFit, test, type = "prob")
confusionMatrix(pred, test$Attrition)
pred
data.frame(pred) %>% select(No) %>% ggplot(aes(No))+
geom_histogram()
data.frame(pred) %>% select(No) %>% ggplot(aes(No))+
geom_histogram(bins=50)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
confusionMatrix(pred, test$Attrition)
confusionMatrix(pred2, test$Attrition)
library(caret)
split = createDataPartition(df$Attrition, p = 0.7, list = F)
train = df[split,] %>% drop_na()
test = df[-split,] %>% drop_na()
library(randomForest)
rf =randomForest::randomForest(Attrition~., data = train)
pred = predict(rf, test, type = "response")
#pred[pred > 0.5] = "Yes"
#pred[pred < 0.5] = "No"
mean(pred == test$Attrition)
confusionMatrix(pred, test$Attrition)
rf
pred2 = predict(rf, test, type = "prob")
data.frame(pred2) %>% select(No) %>%
ggplot(aes(No)) + geom_histogram(bins=50) + ggtitle("Probability of Staying Based on Random Forest")
varImpPlot(rf, n.var = 17)
df$Attrition = as.factor(df$Attrition)
library(pdp)
rf %>%
partial(pred.var = "MonthlyIncome") %>%
plotPartial(rug = TRUE, train = train, main = "Monthly Income Partial Dependence Plot")
library(pdp)
rf %>%
partial(pred.var = "Age") %>%
plotPartial(rug = TRUE, train = train, main = "Age Partial Dependence Plot")
library(pdp)
rf %>%
partial(pred.var = "OverTime") %>%
plotPartial(rug = TRUE, train = train)
linearmod = glm(Attrition~., data = train, family = "binomial")
pred = predict(linearmod, test, type = "response")
confusionMatrix(pred, test$Attrition)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
confusionMatrix(pred2, test$Attrition)
data.frame(pred) %>% select(No) %>% ggplot(aes(No))+
geom_histogram(bins=50)
library(MASS)
coef = add_rownames(data.frame(linearmod$coefficients), "coefficent")
coef %>% ggplot(aes(coefficent,linearmod.coefficients))+
geom_bar(stat="identity")+ labs(y="Effect") +
theme(axis.text.x = element_text(size = 8, angle = 90))
library(pdp)
rf %>%
partial(pred.var = "DailyRate") %>%
plotPartial(rug = TRUE, train = train, main = "Monthly Income Partial Dependence Plot")
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "qda",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
pred = predict(regFit, test, type = "prob")
pred2 = predict(regFit, test)
confusionMatrix(pred2, test$Attrition)
data.frame(pred) %>% select(No) %>% ggplot(aes(No))+
geom_histogram(bins=50)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
regFit <- train(
Attrition ~ .,
data = train %>% drop_na(),
trControl = ctrl,
method = "glm",
#family = "binomial",
## Center and scale the predictors for the training
## set and all future samples.
preProc = c("center", "scale"),
tuneLength = 10
)
